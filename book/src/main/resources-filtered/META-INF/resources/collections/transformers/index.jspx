<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-collections-transformers - Bi-directional collection transformations for Java.
Copyright (C) 2020, 2021  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-collections-transformers.

ao-collections-transformers is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-collections-transformers is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-collections-transformers.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://oss.aoapps.com/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:section="https://semanticcms.com/section/taglib/"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" />
	<jsp:directive.page session="false" />
	<core:page
		title="@{documented.name}"
		description="@{documented.description}"
		datePublished="2020-11-14T18:17:19-06:00"
		dateModified="2021-06-03T22:53:21-05:00"
	>
		<core:child page="changelog.jspx" />
		<core:child page="apidocs/index.jspx" />
		<header>
			<ao:include
				page="/ao-badges/badges.inc.jspx"
				arg.projectStatus="current-stable"
				arg.managementStatus="production"
				arg.packagingStatus="active"
				arg.javaseVersion="@{documented.javase.version}"
				arg.semanticVersioning="2.0.0"
				arg.license="lgpl-3.0"
			/>
		</header>
		<p>
			@{documented.description}
		</p>
		<section:nav label="Project Links">
			<ul>
				<li><core:link page="index.jspx">Project Home</core:link></li>
				<li><core:link page="changelog.jspx">Changelog</core:link></li>
				<li><core:link page="apidocs/index.jspx">API Docs</core:link></li>
				<li><ao:a href="https://search.maven.org/artifact/${ao:encodeURIComponent('@{project.groupId}')}/${ao:encodeURIComponent('@{documented.artifactId}')}">Maven Central Repository</ao:a></li>
				<li><ao:a href="@{project.scm.url}">GitHub</ao:a></li>
			</ul>
		</section:nav>
		<section:section label="Features">
			<ul>
				<li>Bi-directional transformations allow for modification of the transformed collections.</li>
				<li>Support for all the major collections framework interfaces (Enumeration, ListIterator, Map, Set, SortedSet, Queue, Deque, …).</li>
				<li>Small footprint, self-contained, no transitive dependencies - not part of a big monolithic package.</li>
			</ul>
		</section:section>
		<section:section label="Motivation">
			<p>
				<ao:a href="https://www.lego.com/">LEGO®</ao:a> were my absolute favorite as a child.  I played with them for years.  I brought my
				creations everywhere: submarine navigating the depths of the bathtub, motorized pickup truck climbing the neighbor's
				steep grass hill, airplane flying in the wind outside the car window, hydroplane skimming across the summer lake.
				They were the best.
			</p>
			<p>
				Then I found computers.  Computers were my absolute favorite.  I played with them for years.  I still play with them.
				They are the best.
			</p>
			<p>
				Now, as a superficially responsible adult, I like to be able to compose software as I would build with LEGO®.  Toward
				this end, we have created bi-directional collections transformations for Java.  This allows the composition of
				collections in new ways.
			</p>
		</section:section>
		<section:section label="Example">
			<p>
				For example, our specific motivation to develop this API was the desire to have a linked map with identity keys (use
				arbitrary objects as keys while maintaining map ordering). We could not simply combine
				<ao:a rel="nofollow" href="@{javadoc.link.javase}java/util/IdentityHashMap.html">IdentityHashMap</ao:a> and
				<ao:a rel="nofollow" href="@{javadoc.link.javase}java/util/LinkedHashMap.html">LinkedHashMap</ao:a> because they are both concrete
				implementations.  We also could not combine
				<ao:a href="https://oss.aoapps.com/collections/apidocs/com/aoapps/collections/IdentityKey.html">IdentityKey</ao:a> with
				<ao:a rel="nofollow" href="@{javadoc.link.javase}java/util/LinkedHashMap.html">LinkedHashMap</ao:a> because that would alter the map
				key type to be the identity-key wrapper.
			</p>
			<p>
				The solution is a bi-directional transformation through
				<ao:a href="https://oss.aoapps.com/collections/apidocs/com/aoapps/collections/IdentityKey.html">IdentityKey</ao:a> on top of
				<ao:a rel="nofollow" href="@{javadoc.link.javase}java/util/LinkedHashMap.html">LinkedHashMap</ao:a>.  We can now add/remove objects and
				fully interact with the map with the identity-key wrapping performed on-the-fly behind-the-scenes:
			</p>
<pre><![CDATA[Map&lt;SomeKeyType, ?&gt; map = TransformMap.of(
	new LinkedHashMap&lt;&gt;(),
	new FunctionalTransformer&lt;&gt;(
		SomeKeyType.class,
		(Class&lt;IdentityKey&lt;SomeKeyType&gt;&gt;)(Class)IdentityKey.class,
		IdentityKey::of,
		IdentityKey::getValue
	),
	Transformer.identity()
)]]></pre>
		</section:section>
		<section:aside label="Alternatives">
			<ul>
				<li><ao:a href="https://github.com/google/guava">Google Guava</ao:a>
					- Provides <strong>one-way</strong> transform views of the most common collections
					types in the <ao:a href="https://guava.dev/releases/19.0/api/docs/com/google/common/collect/package-summary.html">com.google.common.collect</ao:a>
					package.
				</li>
			</ul>
		</section:aside>
	</core:page>
</jsp:root>
